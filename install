#!/bin/bash

# --- Color Definitions ---
Green="\e[92;1m"
RED="\033[31m"
YELLOW="\033[33m"
BLUE="\033[36m"
FONT="\033[0m"
GREENBG="\033[42;37m"
REDBG="\033[41;37m"
OK="${Green}--->${FONT}"
ERROR="${RED}[ERROR]${FONT}"
GRAY="\e[1;30m"
NC='\e[0m'
red='\e[1;31m'
green='\e[0;32m'
purple="\e[0;33m"
yell="\e[1;33m"

# --- Initial Clear and IP Export ---
clear
export IP=$(curl -sS --max-time 10 icanhazip.com)

# --- Clear Screen Multiple Times ---
clear && clear && clear
clear;clear;clear
clear

# --- Script Validation ---
ipsaya=$(curl -sS --max-time 10 ipv4.icanhazip.com || curl -sS --max-time 10 checkip.amazonaws.com || curl -sS --max-time 10 ifconfig.me)

# Menggunakan NTP server standar untuk mendapatkan waktu yang lebih reliable
data_server=$(ntpdate -q pool.ntp.org 2>/dev/null | grep "stratum 2" | awk '{print $4}' | xargs -I {} date -d {} +"%Y-%m-%d" 2>/dev/null)
if [ -z "$data_server" ]; then
    data_server=$(date +"%Y-%m-%d")
fi
date_list=$(date +"%Y-%m-%d" -d "$data_server")

# --- Banner ---
echo -e "${YELLOW}----------------------------------------------------------${NC}"
echo -e " WELCOME TO HOKAGE LEGEND STORE VPN ${YELLOW}(${NC}${green}Stable Edition${NC}${YELLOW})${NC}"
echo -e " PROSES PENGECEKAN IP ADDRESS ANDA !!"
echo -e "${purple}----------------------------------------------------------${NC}"
echo -e " ›AUTHOR : ${green}HOKAGE STORE® ${NC}${YELLOW}(${NC}${green}V 3.5${NC}${YELLOW})${NC}"
echo -e " ›TEAM 🅥🅝: HOKAGE STORE ${YELLOW}(${NC} 2025 ${YELLOW})${NC}"
echo -e "${YELLOW}----------------------------------------------------------${NC}"
echo ""
sleep 2

# --- Checking OS Architecture ---
if [[ "$(uname -m | awk '{print $1}')" == "x86_64" ]]; then
    echo -e "${OK} Your Architecture Is Supported (${green}$(uname -m)${NC})"
else
    echo -e "${ERROR} Your Architecture Is Not Supported (${YELLOW}$(uname -m)${NC})"
    exit 1
fi

# --- Checking System (Updated for Ubuntu 24.04 alias Noble Numbat) ---
OS_ID=$(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g')
PRETTY_NAME=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')

if [[ "$OS_ID" == "ubuntu" ]]; then
    if [[ "$PRETTY_NAME" =~ "Ubuntu 24.04" ]]; then
        echo -e "${OK} Your OS Is Supported (${green}$PRETTY_NAME${NC})"
    else
        echo -e "${OK} Your OS Is Supported (But not specifically 24.04, proceed with caution: ${green}$PRETTY_NAME${NC})"
    fi
elif [[ "$OS_ID" == "debian" ]]; then
    echo -e "${OK} Your OS Is Supported (${green}$PRETTY_NAME${NC})"
else
    echo -e "${ERROR} Your OS Is Not Supported (${YELLOW}$PRETTY_NAME${NC})"
    exit 1
fi

# --- IP Address Validating ---
if [[ -z "$IP" ]]; then
    echo -e "${ERROR} IP Address (${YELLOW}Not Detected${NC})"
else
    echo -e "${OK} IP Address (${green}$IP${NC})"
fi

# --- Validate Successfull ---
echo ""
read -p "$(echo -e "Press ${GRAY}[ ${NC}${green}Enter${NC} ${GRAY}]${NC} For Starting Installation") "
echo ""
clear

if [ "${EUID}" -ne 0 ]; then
    echo "You need to run this script as root"
    exit 1
fi

if [ "$(systemd-detect-virt)" == "openvz" ]; then
    echo "OpenVZ is not supported"
    exit 1
fi

# --- REPO Definition ---
REPO="https://raw.githubusercontent.com/hotsuper901/b/refs/heads/main/"

# --- Time Measurement ---
start=$(date +%s)
secs_to_human() {
    echo "Installation time : $((${1} / 3600)) hours $(((${1} / 60) % 60)) minute's $((${1} / 60) % 60)) seconds"
}

# --- Status Functions ---
function print_ok() {
    echo -e "${OK} ${BLUE} $1 ${FONT}"
}
function print_install() {
    echo -e "${green} =============================== ${FONT}"
    echo -e "${YELLOW} # $1 ${FONT}"
    echo -e "${green} =============================== ${FONT}"
    sleep 1
}
function print_error() {
    echo -e "${ERROR} ${REDBG} $1 ${FONT}"
}
function print_success() {
    if [[ 0 -eq $? ]]; then
        echo -e "${green} =============================== ${FONT}"
        echo -e "${Green} # $1 berhasil dipasang"
        echo -e "${green} =============================== ${FONT}"
        sleep 2
    fi
}

# --- Create Xray Directory (Adjusted) ---
print_install "Membuat direktori xray"
mkdir -p /etc/xray
curl -sS --max-time 10 ifconfig.me > /etc/xray/ipvps
touch /etc/xray/domain
mkdir -p /var/log/xray
chown www-data:www-data /var/log/xray
chmod 755 /var/log/xray
touch /var/log/xray/access.log
touch /var/log/xray/error.log
mkdir -p /var/lib/kyt >/dev/null 2>&1

# --- RAM Information (No changes needed) ---
while IFS=":" read -r a b; do
case $a in
    "MemTotal") ((mem_used+=${b/kB})); mem_total="${b/kB}" ;;
    "Shmem") ((mem_used+=${b/kB})) ;;
    "MemFree" | "Buffers" | "Cached" | "SReclaimable")
    mem_used="$((mem_used-=${b/kB}))"
;;
esac
done < /proc/meminfo
Ram_Usage="$((mem_used / 1024))"
Ram_Total="$((mem_total / 1024))"
export tanggal=$(date +"%d-%m-%Y - %X")
export OS_Name=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/PRETTY_NAME//g' | sed 's/=//g' | sed 's/"//g')
export Kernel=$(uname -r)
export Arch=$(uname -m)
export IP=$(curl -s --max-time 10 https://ipinfo.io/ip/)

# --- Change Environment System (Adjusted) ---
function first_setup(){
    timedatectl set-timezone Asia/Jakarta
    echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
    echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections
    print_success "Directory Xray"
    if [[ "$(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g')" == "ubuntu" ]]; then
        echo "Setup Dependencies $(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')"
        sudo apt update -y
        apt-get install --no-install-recommends software-properties-common -y
    elif [[ "$(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g')" == "debian" ]]; then
        echo "Setup Dependencies For OS Is $(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')"
    else
        echo -e " Your OS Is Not Supported ($(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g') )"
        exit 1
    fi
}

# --- Nginx Install (No changes needed) ---
clear
function nginx_install() {
    if [[ "$(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g')" == "ubuntu" ]]; then
        print_install "Setup nginx For OS Is $(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')"
        sudo apt-get install nginx -y
    elif [[ "$(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g')" == "debian" ]]; then
        print_success "Setup nginx For OS Is $(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')"
        apt -y install nginx
    else
        echo -e " Your OS Is Not Supported ( ${YELLOW}$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')${FONT} )"
    fi
}

# --- Update and remove packages (Adjusted) ---
function base_package() {
    clear
    print_install "Menginstall Packet Yang Dibutuhkan"

    # Minimal update dan upgrade sebelum instalasi paket
    apt update -y || print_error "Failed to update package lists."
    apt upgrade -y || print_error "Failed to upgrade packages."
    apt full-upgrade -y || print_error "Failed to full-upgrade packages."

    # --- PENTING: Instal jq secara terpisah dan lebih awal ---
    print_install "Memasang jq untuk pemrosesan JSON..."
    apt install -y jq || print_error "Gagal menginstal jq. Beberapa fungsi mungkin tidak berjalan."
    print_success "jq berhasil dipasang."

    # Paket-paket dasar
    apt install -y zip pwgen openssl netcat-traditional socat cron bash-completion figlet || print_error "Failed to install core packages."

    # Time synchronization
    systemctl enable chrony.service || true
    systemctl restart chrony.service || true
    chronyc sourcestats -v || true
    chronyc tracking -v || true
    
    apt install -y sudo ruby || print_error "Failed to install sudo or ruby."
    gem install lolcat || print_error "Failed to install lolcat gem."
    sudo apt-get clean all
    sudo apt-get autoremove -y
    sudo apt-get install -y debconf-utils || print_error "Failed to install debconf-utils."

    # Menghapus exim4 dan ufw/firewalld (hati-hati dengan ini)
    sudo apt-get remove --purge exim4 -y || true
    sudo apt-get remove --purge ufw firewalld -y || true

    sudo apt-get install -y --no-install-recommends software-properties-common || print_error "Failed to install software-properties-common."

    # iptables-persistent
    echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
    echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections
    sudo apt install --reinstall iptables-persistent -y > /dev/null 2>&1 || print_error "Failed to reinstall iptables-persistent."
    sudo iptables-save > /etc/iptables/rules.v4 || print_error "Failed to save iptables IPv4 rules."
    sudo ip6tables-save > /etc/iptables/rules.v6 || print_error "Failed to save iptables IPv6 rules."
    sudo systemctl restart netfilter-persistent.service || true # Gunakan yang benar
    sudo systemctl enable netfilter-persistent.service || true # Pastikan aktif

    # Paket-paket tambahan (jq dihapus dari sini karena sudah diinstal di atas)
    apt-get install -y speedtest-cli vnstat libnss3-dev libnspr4-dev pkg-config libpam0g-dev libcap-ng-dev \
        libcap-ng-utils libselinux1-dev libcurl4-nss-dev flex bison make libnss3-tools libevent-dev bc rsyslog \
        dos2unix zlib1g-dev libssl-dev libsqlite3-dev sed dirmngr libxml-parser-perl build-essential gcc g++ \
        python3 htop lsof tar wget curl ruby zip unzip p7zip-full python3-pip libc6 util-linux msmtp-mta \
        ca-certificates bsd-mailx iptables netfilter-persistent net-tools openssl gnupg \
        gnupg2 lsb-release gcc shc make cmake git screen socat xz-utils apt-transport-https dnsutils \
        || print_error "Failed to install additional packages."

    print_success "Packet Yang Dibutuhkan"
}
clear

# --- Fungsi input domain ---
function pasang_domain() {
echo -e ""
clear
    echo -e "    .----------------------------------."
echo -e "    |\e[1;32mPILIH DOMAIN SILAHKAN \e[0m|"
echo -e "    '----------------------------------'"
echo -e "      \e[1;32m1)\e[0m Menggunakan Domain Sendiri"
echo -e "      \e[1;32m2)\e[0m Menggunakan Domain Script (Cloudflare)"
echo -e "    ------------------------------------"
read -p "    Please select numbers 1-2 or Any Button (Random Subdomain) : " host
echo ""

if [[ "$host" == "1" ]]; then
    echo -e "    \e[1;32mPlease Enter Your Subdomain ${NC}"
    read -p "    Subdomain: " host1
    echo "IP=" >> /var/lib/kyt/ipvps.conf
    echo "$host1" > /etc/xray/domain
    echo "$host1" > /root/domain
    echo ""
elif [[ "$host" == "2" ]]; then
    print_install "Installing Cloudflare Script"
    wget "${REPO}Data/cf.sh" -O /root/cf.sh && chmod +x /root/cf.sh && bash /root/cf.sh
    rm -f /root/cf.sh
    clear
else
    print_install "Random Subdomain/Domain is Used"
    clear
fi
}

# --- GANTI PASSWORD DEFAULT (Placeholder function) ---
function password_default() {
    print_install "Setting Default Passwords (Placeholder)"
    echo "Default password settings placeholder executed. Implement your password changes here."
    print_success "Default Passwords Set"
}

# --- Restart System & Telegram Notification ---
function restart_system(){
#IZIN SCRIPT
print_install "Sending Installation Notification & Setting Hostname"
curl --retry 5 --retry-delay 5 "ipinfo.io/org?token=7a814b6263b02c" > /root/.isp || echo "Unknown ISP" > /root/.isp
curl --retry 5 --retry-delay 5 "ipinfo.io/city?token=7a814b6263b02c" > /root/.city || echo "Unknown City" > /root/.city
MYIP=$(curl -sS --max-time 10 ipv4.icanhazip.com || curl -sS --max-time 10 checkip.amazonaws.com || curl -sS --max-time 10 ifconfig.me)

echo -e "\e[32mloading...\e[0m"
clear

izinsc="https://raw.githubusercontent.com/hotsuper901/b/refs/heads/main/ijin"

# USERNAME
rm -f /usr/bin/user
username=$(curl -sS --max-time 10 "$izinsc" | grep "$MYIP" | awk '{print $2}')
echo "$username" >/usr/bin/user || echo "unknown_user" > /usr/bin/user
expx=$(curl -sS --max-time 10 "$izinsc" | grep "$MYIP" | awk '{print $3}')
echo "$expx" >/usr/bin/e || echo "unknown_exp" > /usr/bin/e

# DETAIL ORDER
username=$(cat /usr/bin/user)
oid=$(cat /usr/bin/ver 2>/dev/null || echo "N/A")
exp=$(cat /usr/bin/e)
clear

# Status Expired Active
Info="(${green}Active${NC})"
Error="(${RED}ExpiRED${NC})"
today=$(date +"%Y-%m-%d")
Exp1=$(curl -sS --max-time 10 "$izinsc" | grep "$MYIP" | awk '{print $4}')
if [[ "$today" < "$Exp1" ]]; then
    sts="${Info}"
else
    sts="${Error}"
fi

# Telegram Notification
TIMES="10"
CHATID="1469244768"
KEY="7219522943:AAFZGZIbRU-CodrmgGJRuyXCV55sJDOSrSg" # PENTING: JANGAN BIARKAN API KEY TERBOCOR!
URL="https://api.telegram.org/bot${KEY}/sendMessage"
ISP=$(cat /root/.isp)
IP_NOTIF=$(curl -sS --max-time 10 ipv4.icanhazip.com)
CITY=$(cat /root/.city)
TIMEZONE=$(TZ='Asia/Jakarta' printf '%(%H:%M:%S)T')

TEXT="
<code>────────────────────</code>
<b>⚡𝗡𝗢𝗧𝗜𝗙 𝗜𝗡𝗦𝗧𝗔𝗟𝗟 𝗦𝗖𝗥�𝗣𝗧⚡</b>
<code>────────────────────</code>
<code>User      :</code><code>${username}</code>
<code>ISP       :</code><code>${ISP}</code>
<code>CITY      :</code><code>${CITY}</code>
<code>IP        :</code><code>${IP_NOTIF}</code>
<code>DATE      :</code><code>${DATE}</code>
<code>Time      :</code><code>${TIMEZONE}</code>
<code>Exp Sc.   :</code><code>${exp}</code>
<code>─────────────────────────────</code>
<b>HOKAGE CENTER VPN STORE SCRIPT</b>
<code>─────────────────────────────</code>
<i>Automatic Notifications From Github</i>
"
JSON_PAYLOAD=$(jq -n \
    --arg chat_id "$CHATID" \
    --arg text "$TEXT" \
    --arg parse_mode "html" \
    --argjson reply_markup '{"inline_keyboard":[[{"text":"ᴏʀᴅᴇʀ","url":"t.me/MSJ"}]]}' \
    '{chat_id: $chat_id, text: $text, parse_mode: $parse_mode, reply_markup: $reply_markup}')

curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "$JSON_PAYLOAD" \
    --max-time "$TIMES" "$URL" >/dev/null
print_success "Telegram Notification Sent"
}
clear

# --- Pasang SSL (Adjusted for Robustness) ---
function pasang_ssl() {
clear
print_install "Memasang SSL Pada Domain"
rm -rf /etc/xray/xray.key
rm -rf /etc/xray/xray.crt
domain=$(cat /etc/xray/domain 2>/dev/null || cat /root/domain 2>/dev/null)
    if [ -z "$domain" ]; then
print_error "Domain not found. Skipping SSL installation."
return 1
fi

systemctl stop nginx.service || true
systemctl stop apache2.service || true
PIDS_ON_80=$(lsof -t -i:80 -sTCP:LISTEN)
    if [ -n "$PIDS_ON_80" ]; then
echo -e "${YELLOW}Warning: Processes still listening on port 80: ${PIDS_ON_80}${NC}"
        echo -e "${YELLOW}Attempting to kill them...${NC}"
        kill -9 $PIDS_ON_80 2>/dev/null || true
        sleep 2
    fi

    rm -rf /root/.acme.sh
    mkdir -p /root/.acme.sh
    
    wget -O /root/.acme.sh/acme.sh --tries 5 --wait 5 https://acme-install.netlify.app/acme.sh
    if [ ! -f /root/.acme.sh/acme.sh ]; then
        print_error "Failed to download acme.sh. Skipping SSL installation."
        return 1
    fi
    chmod +x /root/.acme.sh/acme.sh
    /root/.acme.sh/acme.sh --upgrade --auto-upgrade || true
    /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt || true

    if ! /root/.acme.sh/acme.sh --issue -d "$domain" --standalone -k ec-256; then
        print_error "Failed to issue SSL certificate for $domain. Check DNS records and firewall."
        systemctl start nginx.service || true
        return 1
    fi

    if ! ~/.acme.sh/acme.sh --installcert -d "$domain" --fullchainpath /etc/xray/xray.crt --keypath /etc/xray/xray.key --ecc; then
        print_error "Failed to install SSL certificate."
        systemctl start nginx.service || true
        return 1
    fi

    chmod 644 /etc/xray/xray.key
    print_success "SSL Certificate"
    systemctl start nginx.service || true
}

# --- Make Xray Folder (Adjusted permissions) ---
function make_folder_xray() {
rm -rf /etc/vmess/.vmess.db
    rm -rf /etc/vless/.vless.db
    rm -rf /etc/trojan/.trojan.db
    rm -rf /etc/shadowsocks/.shadowsocks.db
    rm -rf /etc/ssh/.ssh.db
    rm -rf /etc/bot/.bot.db
    rm -rf /etc/user-create/user.log
    mkdir -p /etc/bot
    mkdir -p /etc/xray
    mkdir -p /etc/vmess
    mkdir -p /etc/vless
    mkdir -p /etc/trojan
    mkdir -p /etc/shadowsocks
    mkdir -p /etc/ssh
    mkdir -p /usr/bin/xray/
    mkdir -p /var/log/xray/
    mkdir -p /var/www/html
    mkdir -p /etc/kyt/limit/vmess/ip
    mkdir -p /etc/kyt/limit/vless/ip
    mkdir -p /etc/kyt/limit/trojan/ip
    mkdir -p /etc/kyt/limit/ssh/ip
    mkdir -p /etc/limit/vmess
    mkdir -p /etc/limit/vless
    mkdir -p /etc/limit/trojan
    mkdir -p /etc/limit/ssh
    mkdir -p /etc/user-create
    chmod 755 /var/log/xray
    touch /etc/xray/domain
    touch /var/log/xray/access.log
    touch /var/log/xray/error.log
    touch /etc/vmess/.vmess.db
    touch /etc/vless/.vless.db
    touch /etc/trojan/.trojan.db
    touch /etc/shadowsocks/.shadowsocks.db
    touch /etc/ssh/.ssh.db
    touch /etc/bot/.bot.db
    echo "& plughin Account" >>/etc/vmess/.vmess.db
    echo "& plughin Account" >>/etc/vless/.vless.db
    echo "& plughin Account" >>/etc/trojan/.trojan.db
    echo "& plughin Account" >>/etc/shadowsocks/.shadowsocks.db
    echo "& plughin Account" >>/etc/ssh/.ssh.db
    echo "echo -e 'Vps Config User Account'" >> /etc/user-create/user.log
    }

# --- Install Xray (Cleaned and Adjusted) ---
function install_xray() {
    clear
    print_install "Core Xray Latest Version"

    domainSock_dir="/run/xray"
    mkdir -p "$domainSock_dir" || print_error "Gagal membuat direktori domain socket Xray."
    chown www-data:www-data "$domainSock_dir" || print_error "Gagal mengatur kepemilikan direktori domain socket Xray."

    print_install "Memastikan Xray Core terinstal atau memperbarui..."
    latest_version=$(curl -sS --max-time 10 https://api.github.com/repos/XTLS/Xray-core/releases | grep tag_name | sed -E 's/.*"v(.*)".*/\1/' | head -n 1)
    if [ -z "$latest_version" ]; then
        print_error "Gagal mendapatkan versi Xray terbaru. Perbaikan mungkin tidak optimal."
    fi
    bash -c "$(curl -L -sS --max-time 10 https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version "$latest_version"
    if [ ! -f /usr/local/bin/xray ]; then
        print_error "Instalasi Xray core gagal. Periksa koneksi internet atau akses GitHub."
        exit 1
    fi
    print_success "Xray Core berhasil diinstal/diperbarui."

    print_install "Mengunduh konfigurasi Xray ke /etc/xray/..."
    wget -O /etc/xray/config.json --tries 5 --wait 5 "${REPO}Data/config.json" >/dev/null 2>&1 || print_error "Gagal mengunduh config.json Xray. Pastikan file ini ada di REPO."
    wget -O /etc/systemd/system/runn.service --tries 5 --wait 5 "${REPO}Data/runn.service" >/dev/null 2>&1 || print_error "Gagal mengunduh runn.service."
    domain=$(cat /etc/xray/domain 2>/dev/null)
    if [ -z "$domain" ]; then
        print_error "File domain tidak ditemukan di /etc/xray/domain. Konfigurasi Nginx mungkin tidak diperbarui dengan benar."
    fi
    
    print_success "Konfigurasi Xray berhasil diunduh."

    print_install "Memasang Konfigurasi Packet (Nginx)..."
    curl -sS --max-time 10 ipinfo.io/city >>/etc/xray/city || echo "Unknown City" >>/etc/xray/city
    curl -sS --max-time 10 ipinfo.io/org | cut -d " " -f 2-10 >>/etc/xray/isp || echo "Unknown ISP" >>/etc/xray/isp
    
    # Menimpa file konfigurasi Nginx untuk Xray dengan yang sudah diperbaiki
    cat >/etc/nginx/conf.d/xray.conf <<EOF
# Server Block untuk HTTP (Port 80)
server {
    listen 80;
    listen [::]:80;
    server_name ${domain}; # Menggunakan variabel domain

    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    location /vless {
        if (\$http_upgrade != "websocket") { return 404; }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /vmess {
        if (\$http_upgrade != "websocket") { return 404; }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10002;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /trojan-ws {
        if (\$http_upgrade != "websocket") { return 404; }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10003;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /ss-ws {
        if (\$http_upgrade != "websocket") { return 404; }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10004;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /ssh-ws {
        if (\$http_upgrade != "websocket") { return 404; }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10015;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location / {
        return 301 https://\$host\$request_uri;
    }
}

# Server Block untuk HTTPS (Port 443)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${domain}; # Menggunakan variabel domain

    ssl_certificate /etc/xray/xray.crt;
    ssl_certificate_key /etc/xray/xray.key;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
    ssl_prefer_server_ciphers on;

    client_body_buffer_size 200K;
    client_header_buffer_size 2k;
    client_max_body_size 10M;
    large_client_header_buffers 3 1k;
    client_header_timeout 86400000m;
    keepalive_timeout 86400000m;

    location /vless {
        if (\$http_upgrade != "websocket") { return 404; }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /vmess {
        if (\$http_upgrade != "websocket") { return 404; }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10002;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /trojan-ws {
        if (\$http_upgrade != "websocket") { return 404; }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10003;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /ss-ws {
        if (\$http_upgrade != "websocket") { return 404; }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10004;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /ssh-ws {
        if (\$http_upgrade != "websocket") { return 404; }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10015;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /vless-grpc {
        grpc_pass grpc://127.0.0.1:10005;
        grpc_set_header Host \$host;
        grpc_set_header X-Real-IP \$remote_addr;
        grpc_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /vmess-grpc {
        grpc_pass grpc://127.0.0.1:10006;
        grpc_set_header Host \$host;
        grpc_set_header X-Real-IP \$remote_addr;
        grpc_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /trojan-grpc {
        grpc_pass grpc://127.0.0.1:10007;
        grpc_set_header Host \$host;
        grpc_set_header X-Real-IP \$remote_addr;
        grpc_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /ss-grpc {
        grpc_pass grpc://127.0.0.1:10008;
        grpc_set_header Host \$host;
        grpc_set_header X-Real-IP \$remote_addr;
        grpc_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location / {
        return 404;
    }
EOF
# Pastikan nginx.conf yang di-download kompatibel dengan Nginx versi Ubuntu 24.04
sudo curl -fsSL --tries 5 --wait 5 "${REPO}Data/nginx.conf" -o /etc/nginx/nginx.conf || print_error "Gagal mengunduh nginx.conf."

    # > Set Permission
    chmod +x /etc/systemd/system/runn.service

    # > Create Service
    print_install "Membersihkan konfigurasi Systemd Xray yang mungkin bertentangan..."
    rm -rf /etc/systemd/system/xray.service.d || true
    rm -f /etc/systemd/system/xray.service

    cat >/etc/systemd/system/xray.service <<EOF
Description=Xray Service
Documentation=https://github.com
After=network.target nss-lookup.target

[Service]
User=www-data
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
ExecStart=/usr/local/bin/xray run -config /etc/xray/config.json
Restart=on-failure
RestartPreventExitStatus=23
LimitNPROC=10000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF
    print_success "Konfigurasi Packet dan Service Xray berhasil diperbarui."
}

# --- SSH Configuration (Adjusted) ---
function ssh(){
clear
print_install "Memasang Password SSH & Konfigurasi Sistem"
    wget -O /etc/pam.d/common-password --tries 5 --wait 5 "${REPO}Data/password" || print_error "Gagal mengunduh common-password config."
chmod 644 /etc/pam.d/common-password

DEBIAN_FRONTEND=noninteractive dpkg-reconfigure keyboard-configuration || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/altgr select The default for the keyboard layout" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/compose select No compose key" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/ctrl_alt_bksp boolean false" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/layoutcode string us"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/layout select English" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/modelcode string pc105" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/model select Generic 105-key (Intl) PC" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/optionscode string " || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/store_defaults_in_debconf_db boolean true" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/switch select No temporary switch" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/toggle select No toggling" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_config_layout boolean true" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_config_options boolean true" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_layout boolean true" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_options boolean true" || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/variantcode string " || true
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/variant select English (US)" || true
cd /root || exit

cat > /etc/systemd/system/rc-local.service <<-EOF
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local
[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
EOF

cat > /etc/rc.local <<-EOF
#!/bin/sh -e
# rc.local
# By default this script does nothing.
exit 0
EOF

chmod +x /etc/rc.local

systemctl enable rc-local.service || true
systemctl start rc-local.service || true

echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
sed -i '$ i\echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6' /etc/rc.local

ln -fs /usr/share/zoneinfo/Asia/Jakarta /etc/localtime

sed -i 's/AcceptEnv/#AcceptEnv/g' /etc/ssh/sshd_config
print_success "Password SSH & Konfigurasi Sistem"
}

# --- UDP Mini (Adjusted for robustness) ---
function udp_mini(){
clear
print_install "Memasang Service Limit IP & Quota"
wget -O /tmp/fv-tunnel --tries 5 --wait 5 "https://raw.githubusercontent.com/hotsuper901/b/refs/heads/main/Data/fv-tunnel" && chmod +x /tmp/fv-tunnel && /tmp/fv-tunnel || print_error "Gagal menginstal fv-tunnel."
rm -f /tmp/fv-tunnel || true

mkdir -p /usr/local/kyt/
wget -O /usr/local/kyt/udp-mini --tries 5 --wait 5 "${REPO}Data/udp-mini" || print_error "Gagal mengunduh udp-mini."
chmod +x /usr/local/kyt/udp-mini
wget -O /etc/systemd/system/udp-mini-1.service --tries 5 --wait 5 "${REPO}Data/udp-mini-1.service" || print_error "Gagal mengunduh udp-mini-1.service."
wget -O /etc/systemd/system/udp-mini-2.service --tries 5 --wait 5 "${REPO}Data/udp-mini-2.service" || print_error "Gagal mengunduh udp-mini-2.service."
wget -O /etc/systemd/system/udp-mini-3.service --tries 5 --wait 5 "${REPO}Data/udp-mini-3.service" || print_error "Gagal mengunduh udp-mini-3.service."

systemctl disable udp-mini-1.service || true
systemctl stop udp-mini-1.service || true
systemctl enable udp-mini-1.service || true
systemctl start udp-mini-1.service || true

systemctl disable udp-mini-2.service || true
systemctl stop udp-mini-2.service || true
systemctl enable udp-mini-2.service || true
systemctl start udp-mini-2.service || true

systemctl disable udp-mini-3.service || true
systemctl stop udp-mini-3.service || true
systemctl enable udp-mini-3.service || true
systemctl start udp-mini-3.service || true

print_success "Limit IP Service"
}

# --- SSH SlowDNS (Cleaned) ---
function ssh_slow(){
clear
print_install "Memasang modul SlowDNS Server"
    wget -O /tmp/nameserver --tries 5 --wait 5 "${REPO}Data/nameserver" >/dev/null 2>&1 || print_error "Gagal mengunduh skrip nameserver."
chmod +x /tmp/nameserver
bash /tmp/nameserver | tee /root/install.log
print_success "SlowDNS"
}
clear

# --- Install SSHD (Adjusted for systemctl preference) ---
function ins_SSHD(){
clear
print_install "Memasang SSHD"
wget -O /etc/ssh/sshd_config --tries 5 --wait 5 "${REPO}Data/sshd" >/dev/null 2>&1 || print_error "Gagal mengunduh konfigurasi sshd."
chmod 644 /etc/ssh/sshd_config
systemctl restart sshd.service || /etc/init.d/ssh restart || true
systemctl status sshd.service || /etc/init.d/ssh status || true
print_success "SSHD"
}

clear
# --- Install Dropbear (Adjusted for systemctl preference and config) ---
function ins_dropbear(){
clear
print_install "Menginstal ulang Dropbear untuk memperbaiki unit file"

apt install --reinstall dropbear -y > /dev/null 2>&1
if [ $? -ne 0 ]; then
    print_error "Gagal menginstal ulang paket Dropbear. Instalasi mungkin tidak berfungsi."
    return 1
fi

systemctl daemon-reload || true

wget -O /etc/default/dropbear --tries 5 --wait 5 "https://raw.githubusercontent.com/hotsuper901/b/refs/heads/main/Data/dropbear.conf" || print_error "Gagal mengunduh konfigurasi Dropbear."
chmod 644 /etc/default/dropbear

systemctl restart dropbear.service || /etc/init.d/dropbear restart || true
systemctl status dropbear.service || /etc/init.d/dropbear status || true

if systemctl is-active --quiet dropbear.service; then
    print_success "Dropbear berhasil dipasang dan berjalan."
else
    print_error "Dropbear gagal memulai. Periksa log sistem dengan 'journalctl -xeu dropbear.service' untuk detail."
    systemctl status dropbear.service --no-pager
    return 1
fi
}

# --- Install UDP Custom (No significant changes needed, ensure udp-custom.sh is compatible) ---
function ins_udpSSH(){
clear
print_install "Menginstal Udp-custom"
wget -O /tmp/udp-custom.sh --tries 5 --wait 5 "https://raw.githubusercontent.com/hotsuper901/b/refs/heads/main/udp-custom/udp-custom.sh" || print_error "Gagal mengunduh skrip udp-custom."
chmod +x /tmp/udp-custom.sh
bash /tmp/udp-custom.sh
rm -fr /tmp/udp-custom.sh
print_success "Udp-custom"
}
clear

# --- Install Vnstat (Adjusted for modern Vnstat usage) ---
function ins_vnstat(){
clear
print_install "Menginstal Vnstat"
apt -y install vnstat > /dev/null 2>&1 || print_error "Gagal menginstal vnstat."
systemctl restart vnstat.service || /etc/init.d/vnstat restart || true
apt -y install libsqlite3-dev > /dev/null 2>&1 || print_error "Gagal menginstal libsqlite3-dev."

NET=$(ip -o -4 route show to default | awk '{print $5}' | head -n 1)
if [ -z "$NET" ]; then
    print_error "Tidak dapat mendeteksi antarmuka jaringan utama. Vnstat mungkin tidak berfungsi dengan benar."
    NET="eth0"
fi

vnstat -u -i "$NET" || true
sed -i "s/Interface \"\"eth0\"\"/Interface \"\"${NET}\"\"/g" /etc/vnstat.conf || true
chown vnstat:vnstat /var/lib/vnstat -R || true
systemctl enable vnstat.service || true
systemctl restart vnstat.service || true
systemctl status vnstat.service || true
rm -f /root/vnstat-2.6.tar.gz 2>/dev/null || true
rm -rf /root/vnstat-2.6 2>/dev/null || true
print_success "Vnstat"
}

# --- Install Backup (Adjusted) ---
function ins_backup(){
clear
print_install "Memasang Backup Server"
apt install rclone -y || print_error "Gagal menginstal rclone."
printf "n\n" | rclone config

wget -O /root/.config/rclone/rclone.conf --tries 5 --wait 5 "${REPO}Data/rclone.conf"
if [ $? -ne 0 ]; then
    print_error "Gagal mengunduh konfigurasi Rclone. File 'rclone.conf' mungkin tidak ada di repositori atau masalah jaringan."
    print_error "Anda perlu mengonfigurasi Rclone secara manual setelah instalasi jika ini penting untuk Anda."
else
    chmod 600 /root/.config/rclone/rclone.conf
    print_success "Konfigurasi Rclone berhasil diunduh."
fi

wget -O /usr/local/sbin/wondershaper --tries 5 --wait 5 https://raw.githubusercontent.com/magnific0/wondershaper/master/wondershaper || print_error "Gagal mengunduh skrip wondershaper."
chmod +x /usr/local/sbin/wondershaper
wget -O /etc/wondershaper.conf --tries 5 --wait 5 https://raw.githubusercontent.com/magnific0/wondershaper/master/wondershaper.conf || print_error "Gagal mengunduh konfigurasi wondershaper."
chmod 644 /etc/wondershaper.conf || true

echo > /home/limit
apt install msmtp-mta ca-certificates bsd-mailx -y || print_error "Gagal menginstal dependensi msmtp."

# !!! PERINGATAN KEAMANAN KRITIS !!! Password Gmail terekspos.
cat<<EOF>>/etc/msmtprc
defaults
tls on
tls_starttls on
tls_trust_file /etc/ssl/certs/ca-certificates.crt

account default
host smtp.gmail.com
port 587
auth on
user oceantestdigital@gmail.com
from oceantestdigital@gmail.com
password jokerman77
logfile ~/.msmtp.log
EOF
chown -R root:root /etc/msmtprc
chmod 600 /etc/msmtprc

wget -O /etc/ipserver --tries 5 --wait 5 "${REPO}Data/ipserver" && bash /etc/ipserver || print_error "Gagal menginstal skrip ipserver."
print_success "Backup Server"
}

# --- Install Swap (Adjusted) ---
function ins_swab(){
clear
print_install "Memasang Swap 1 G"
gotop_latest=$(curl -sS --max-time 10 https://api.github.com/repos/xxxserxxx/gotop/releases | grep tag_name | sed -E 's/.*"v(.*)".*/\1/' | head -n 1)
gotop_link="https://github.com/xxxserxxx/gotop/releases/download/v${gotop_latest}/gotop_v${gotop_latest}_linux_amd64.deb"
    
    if ! curl -sL --max-time 10 "$gotop_link" -o /tmp/gotop.deb; then
print_error "Gagal mengunduh gotop. Melanjutkan tanpa itu."
else
dpkg -i /tmp/gotop.deb >/dev/null 2>&1 || print_error "Gagal menginstal paket deb gotop."
rm -f /tmp/gotop.deb || true
fi

dd if=/dev/zero of=/swapfile bs=1M count=1024 || print_error "Gagal membuat swapfile."
mkswap /swapfile || print_error "Gagal memformat swapfile."
chown root:root /swapfile || print_error "Gagal mengatur kepemilikan swapfile."
chmod 0600 /swapfile >/dev/null 2>&1 || print_error "Gagal mengatur izin swapfile."
swapon /swapfile >/dev/null 2>&1 || print_error "Gagal mengaktifkan swapfile."
sed -i '$ i\/swapfile               swap               swap    defaults        0 0' /etc/fstab || print_error "Gagal menambahkan swap ke fstab."

chronyd -q 'server 0.id.pool.ntp.org iburst' || true
chronyc sourcestats -v || true
chronyc tracking -v || true
    
    wget -O /tmp/bbr.sh --tries 5 --wait 5 "${REPO}Data/bbr.sh" && chmod +x /tmp/bbr.sh && /tmp/bbr.sh || print_error "Gagal menginstal BBR."
rm -f /tmp/bbr.sh || true
print_success "Swap 1 G & BBR"
}

# --- Install Fail2ban & DDOS Flate (Adjusted) ---
function ins_Fail2ban(){
clear
print_install "Menginstal Fail2ban"
apt -y install fail2ban > /dev/null 2>&1 || print_error "Gagal menginstal fail2ban."
systemctl enable --now fail2ban.service || true
systemctl restart fail2ban.service || true
systemctl status fail2ban.service | grep Active || true

if [ -d '/usr/local/ddos' ]; then
    echo "DDOS Flate sudah terinstal. Melewati."
else
    mkdir -p /usr/local/ddos
    echo "Placeholder for DDOS Flate installation. Please add actual installation steps."
fi

clear
echo "Banner /etc/kyt.txt" >>/etc/ssh/sshd_config
sed -i 's@DROPBEAR_BANNER=""@DROPBEAR_BANNER="/etc/kyt.txt"@g' /etc/default/dropbear

wget -O /etc/kyt.txt --tries 5 --wait 5 "https://raw.githubusercontent.com/hotsuper901/b/refs/heads/main/Data/issue.net" || print_error "Gagal mengunduh file banner."
print_success "Fail2ban & DDOS Flate"
}

# --- Install ePro WebSocket Proxy (Cleaned and Adjusted) ---
function ins_epro(){
clear
print_install "Menginstal ePro WebSocket Proxy"

    print_install "Menghentikan layanan ws.service untuk memungkinkan pembaruan binary..."
    systemctl stop ws.service || true
    sleep 2

    print_install "Mengunduh binary ws ke /usr/bin/ws..."
    wget -O /usr/bin/ws --tries 5 --wait 5 "${REPO}Data/ws"
    if [ $? -ne 0 ]; then
        print_error "Gagal mengunduh binary /usr/bin/ws. Periksa URL dan koneksi internet."
        return 1
    fi

    chmod +x /usr/bin/ws
    if [ ! -x /usr/bin/ws ]; then
        print_error "Gagal memberikan izin eksekusi untuk /usr/bin/ws."
        return 1
    fi

    file_type=$(file -b /usr/bin/ws)
    if [[ "$file_type" != *"executable"* && "$file_type" != *"script"* ]]; then
        print_error "File /usr/bin/ws yang diunduh bukan executable atau skrip. Ini adalah: $file_type"
        print_error "Kemungkinan download gagal dan mengunduh halaman HTML. Hapus /usr/bin/ws dan coba lagi."
        return 1
    fi
    if [[ "$file_type" == *"ELF"* && "$file_type" != *"x86-64"* ]]; then
        print_error "Binary /usr/bin/ws bukan untuk arsitektur x86-64. Ini adalah: $file_type"
        return 1
    fi
    print_success "Binary /usr/bin/ws berhasil diunduh dan diverifikasi."


    wget -O /usr/bin/tun.conf --tries 5 --wait 5 "${REPO}Data/tun.conf" >/dev/null 2>&1 || print_error "Gagal mengunduh tun.conf."
    wget -O /etc/systemd/system/ws.service --tries 5 --wait 5 "${REPO}Data/ws.service" >/dev/null 2>&1 || print_error "Gagal mengunduh ws.service unit file."
    
    chmod 644 /etc/systemd/system/ws.service
    chmod 644 /usr/bin/tun.conf

    systemctl daemon-reload || true

    systemctl disable ws.service || true
    systemctl stop ws.service || true
    systemctl enable ws.service || true
    systemctl start ws.service || true
    systemctl restart ws.service || true

    if systemctl is-active --quiet ws.service; then
        print_success "ePro WebSocket Proxy berhasil dipasang dan berjalan."
    else
        print_error "ePro WebSocket Proxy gagal memulai. Cek log dengan 'journalctl -xeu ws.service' untuk detail."
        systemctl status ws.service --no-pager
        return 1
    fi

    wget -q -O /usr/local/share/xray/geosite.dat --tries 5 --wait 5 "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat" >/dev/null 2>&1 || print_error "Gagal mengunduh geosite.dat."
    wget -q -O /usr/local/share/xray/geoip.dat --tries 5 --wait 5 "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat" >/dev/null 2>&1 || print_error "Gagal mengunduh geoip.dat."

    wget -O /usr/sbin/ftvpn --tries 5 --wait 5 "${REPO}Data/ftvpn" >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        print_error "Gagal mengunduh ftvpn. File ini mungkin tidak ada di repositori atau masalah jaringan. Melanjutkan instalasi."
    else
        chmod +x /usr/sbin/ftvpn
        print_success "ftvpn berhasil diunduh dan dipasang."
    fi

    iptables -A FORWARD -m string --string "get_peers" --algo bm -j DROP || true
    iptables -A FORWARD -m string --string "announce_peer" --algo bm -j DROP || true
    iptables -A FORWARD -m string --string "find_node" --algo bm -j DROP || true
    iptables -A FORWARD -m string --algo bm --string "BitTorrent" -j DROP || true
    iptables -A FORWARD -m string --algo bm --string "BitTorrent protocol" -j DROP || true
    iptables -A FORWARD -m string --algo bm --string "peer_id=" -j DROP || true
    iptables -A FORWARD -m string --algo bm --string ".torrent" -j DROP || true
    iptables -A FORWARD -m string --algo bm --string "announce.php?passkey=" -j DROP || true
    iptables -A FORWARD -m string --algo bm --string "torrent" -j DROP || true
    iptables -A FORWARD -m string --algo bm --string "announce" -j DROP || true
    iptables -A FORWARD -m string --algo bm --string "info_hash" -j DROP || true

    iptables-save > /etc/iptables.up.rules || true
    iptables-restore -t < /etc/iptables.up.rules || true
    netfilter-persistent save || true
    netfilter-persistent reload || true

    apt autoclean -y >/dev/null 2>&1 || true
    apt autoremove -y >/dev/null 2>&1 || true
    print_success "Konfigurasi ePro WebSocket Proxy selesai."
}

# --- Restart Services (Adjusted) ---
function ins_restart(){
clear
print_install "Restarting All Services"
systemctl restart nginx.service || /etc/init.d/nginx restart || true
systemctl restart sshd.service || /etc/init.d/ssh restart || true
systemctl restart dropbear.service || /etc/init.d/dropbear restart || true
systemctl restart fail2ban.service || /etc/init.d/fail2ban restart || true
systemctl restart vnstat.service || /etc/init.d/vnstat restart || true
systemctl restart cron.service || /etc/init.d/cron restart || true
systemctl daemon-reload || true
systemctl start netfilter-persistent.service || true
systemctl enable --now nginx.service || true
systemctl enable --now xray.service || true
systemctl enable --now rc-local.service || true
systemctl enable --now dropbear.service || true
systemctl enable --now cron.service || true
systemctl enable --now netfilter-persistent.service || true
systemctl enable --now ws.service || true
systemctl enable --now fail2ban.service || true
history -c
echo "unset HISTFILE" >> /etc/profile

cd /root || exit
rm -f /root/openvpn || true
rm -f /root/key.pem || true
rm -f /root/cert.pem || true
print_success "All Services"
}

# --- Install Menu (No changes needed, assuming menu.zip structure is consistent) ---
function menu(){
    clear
    print_install "Memasang Menu Packet"
    wget "${REPO}Menu/menu.zip" -O /tmp/menu.zip || print_error "Gagal mengunduh menu.zip."
    if [ ! -f /tmp/menu.zip ]; then
        print_error "Gagal mengunduh menu.zip. Menu tidak akan diinstal."
        return 1
    fi
    unzip -o /tmp/menu.zip -d /tmp/menu_temp || print_error "Gagal mengekstrak menu.zip."
    chmod +x /tmp/menu_temp/*
    mv /tmp/menu_temp/* /usr/local/sbin/ || print_error "Gagal memindahkan file menu."
    rm -rf /tmp/menu_temp || true
    rm -f /tmp/menu.zip || true
    print_success "Menu Packet"
}

# --- Create Default Profile & Cron Jobs (Adjusted) ---
function profile(){
clear
    cat >/root/.profile <<EOF
# ~/.profile: executed by Bourne-compatible login shells.
if [ "\$BASH" ]; then
    if [ -f ~/.bashrc ]; then
        . ~/.bashrc
    fi
fi
mesg n || true
menu
EOF
mkdir -p /root/.info
curl -sS "ipinfo.io/org?token=7a814b6263b02c" > /root/.info/.isp || true
curl -sS "ipinfo.io/city?token=7a814b6263b02c" > /root/.info/.city || true
cat >/etc/cron.d/xp_all <<-EOF
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
2 0 * * * root /usr/local/sbin/xp
EOF
cat >/etc/cron.d/logclean <<-EOF
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/20 * * * * root /usr/local/sbin/clearlog
EOF
chmod 644 /root/.profile
cat >/etc/cron.d/daily_reboot <<-EOF
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
0 5 * * * root /sbin/reboot
EOF
cat >/etc/cron.d/limit_ip <<-EOF
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/2 * * * * root /usr/local/sbin/limit-ip
EOF
cat >/etc/cron.d/lim-ip-ssh <<-EOF
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/1 * * * * root /usr/local/sbin/limit-ip-ssh
EOF
cat >/etc/cron.d/limit_ip2 <<-EOF
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/2 * * * * root /usr/bin/limit-ip
EOF
echo "*/1 * * * * root echo -n > /var/log/nginx/access.log" >/etc/cron.d/log.nginx
echo "*/1 * * * * root echo -n > /var/log/xray/access.log" >>/etc/cron.d/log.xray
service cron restart || true
cat >/home/daily_reboot <<-EOF
5
EOF
echo "/bin/false" >>/etc/shells
echo "/usr/sbin/nologin" >>/etc/shells
cat >/etc/rc.local <<EOF
#!/bin/sh -e
# rc.local
# By default this script does nothing.
iptables -I INPUT -p udp --dport 5300 -j ACCEPT
iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5300
systemctl restart netfilter-persistent.service || true
exit 0
EOF
chmod +x /etc/rc.local
    
AUTOREB=$(cat /home/daily_reboot)
    SETT=11
    if [ "$AUTOREB" -gt "$SETT" ]; then
        TIME_DATE="PM"
    else
        TIME_DATE="AM"
    fi
print_success "Menu Packet & Cron Jobs"
}

# --- Enable Services (Adjusted) ---
function enable_services(){
clear
print_install "Enable Service"
    systemctl daemon-reload || true
    systemctl start netfilter-persistent.service || true
    systemctl enable --now rc-local.service || true
    systemctl enable --now cron.service || true
    systemctl enable --now netfilter-persistent.service || true
    systemctl restart nginx.service || true
    systemctl restart xray.service || true
    systemctl restart cron.service || true
    systemctl enable --now nginx.service || true
    systemctl enable --now xray.service || true
    systemctl enable --now dropbear.service || true
    systemctl enable --now ws.service || true
    systemctl enable --now fail2ban.service || true
    print_success "Enable Service"
    clear
}

# --- Main Install Function ---
function instal(){
clear
    first_setup
    nginx_install
    base_package
    make_folder_xray
    pasang_domain
    password_default
    pasang_ssl
    install_xray
    ssh
    udp_mini
    ssh_slow
    ins_udpSSH
    ins_SSHD
    ins_dropbear
    ins_vnstat
    ins_backup
    ins_swab
    ins_Fail2ban
    ins_epro
    ins_restart
    menu
    profile
    enable_services
    restart_system
}

# --- Execute Installation ---
instal

echo ""
history -c
rm -f /root/menu || true
rm -f /root/*.zip || true
rm -f /root/*.sh || true
rm -f /root/LICENSE 2>/dev/null || true
rm -f /root/README.md 2>/dev/null || true
rm -f /root/domain || true

if [ -n "$username" ]; then
    sudo hostnamectl set-hostname "$username" || print_error "Gagal mengatur hostname."
else
    print_error "Username tidak terdefinisi, melewati perubahan hostname."
fi
secs_to_human "$(($(date +%s) - ${start}))"

echo ""
echo "------------------------------------------------------------"
echo ""
echo "    >>> Service & Port"  | tee -a log-install.txt
echo "    - OpenSSH             : 22, 53, 2222, 2269"  | tee -a log-install.txt
echo "    - SSH Websocket       : 80" | tee -a log-install.txt
echo "    - SSH SSL Websocket   : 443" | tee -a log-install.txt
echo "    - Stunnel5            : 222, 777" | tee -a log-install.txt
echo "    - Dropbear            : 109, 143" | tee -a log-install.txt
echo "    - Badvpn              : 7100-7300" | tee -a log-install.txt
echo "    - Nginx               : 81" | tee -a log-install.txt
echo "    - XRAY Vmess TLS      : 443" | tee -a log-install.txt
echo "    - XRAY Vmess None TLS : 80" | tee -a log-install.txt
echo "    - XRAY Vless TLS      : 443" | tee -a log-install.txt
echo "    - XRAY Vless None TLS : 80" | tee -a log-install.txt
echo "    - Trojan GRPC         : 443" | tee -a log-install.txt
echo "    - Trojan WS           : 443" | tee -a log-install.txt
echo "    - Trojan GO           : 443" | tee -a log-install.txt
echo "    - Sodosok WS/GRPC     : 443" | tee -a log-install.txt
echo "    - SLOWDNS             : 53"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "    >>> Server Information & Other Features"  | tee -a log-install.txt
echo "    - Timezone            : Asia/Jakarta (GMT +7)"  | tee -a log-install.txt
echo "    - Fail2Ban            : [ON]"  | tee -a log-install.txt
echo "    - Dflate              : [ON]"  | tee -a log-install.txt
echo "    - IPtables            : [ON]"  | tee -a log-install.txt
echo "    - Auto-Reboot         : [ON]"  | tee -a log-install.txt
echo "    - IPv6                : [OFF]"  | tee -a log-install.txt
echo "    - Autobackup Data" | tee -a log-install.txt
echo "    - AutoKill Multi Login User" | tee -a log-install.txt
echo "    - Auto Delete Expired Account" | tee -a log-install.txt
echo "    - Fully automatic script" | tee -a log-install.txt
echo "    - VPS settings" | tee -a log-install.txt
echo "    - Admin Control" | tee -a log-install.txt
echo "    - Change port" | tee -a log-install.txt
echo "    - Restore Data" | tee -a log-install.txt
echo "    - Full Orders For Various Services" | tee -a log-install.txt
echo ""
echo ""
echo "------------------------------------------------------------"
echo ""
echo "===============-[ SCRIPT BY HOKAGE LEGEND ]-==============="
echo -e ""
echo ""
echo "" | tee -a log-install.txt

echo "Semuanya Berjalan Ok...Terimakasih Telah menggunakan Script Hokage Legend!!"

sleep 1

echo -ne "[ ${yell}COMPLETED${NC} ] PENGINSTALAN SCRIPT SELESAI? "

reboot
