#!/bin/bash

# ===============================================
# XRAY Core Installer Script
# (Installs XRAY binary, systemd service file, geoip/geosite, and initial config.json)
# ===============================================

# --- Arguments from main_installer.sh ---
XRAY_BIN_PATH="$1"
XRAY_CONFIG_DIR="$2"
XRAY_LOG_DIR="$3"
XRAY_SERVICE_FILE="$4"
FULL_DOMAIN="$5" # Needed for initial config.json generation
XRAY_TLS_DIR="$6" # Needed for initial config.json (placeholder paths)

# --- Colors for Output (copied from main script for local scope) ---
RED='\033[0m\033[1;31m'
GREEN='\033[0m\033[1;32m'
YELLOW='\033[0m\033[1;33m'
NC='\033[0m'

# --- Helper Functions (local to this script) ---
print_status() { echo -e "\n${YELLOW}>>> $1${NC}"; }
print_error() { echo -e "${RED}!!! ERROR: $1${NC}" >&2; exit 1; }

# --- Main Installation Steps ---
print_status "Executing XRAY Core Installation..."
sudo mkdir -p "$XRAY_CONFIG_DIR" || print_error "Failed to create XRAY config directory."
sudo mkdir -p "$XRAY_LOG_DIR" || print_error "Failed to create XRAY log directory."
sudo chown -R www-data:www-data "$XRAY_LOG_DIR" || print_error "Failed to set ownership for XRAY log directory."

wget "https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip" -O /tmp/xray.zip || print_error "Failed to download XRAY."
sudo unzip /tmp/xray.zip -d /tmp/xray_temp/ || print_error "Failed to unzip XRAY."
sudo mv /tmp/xray_temp/xray "$XRAY_BIN_PATH" || print_error "Failed to move XRAY binary."
sudo chmod +x "$XRAY_BIN_PATH" || print_error "Failed to set XRAY binary executable."
sudo rm -f /tmp/xray.zip &>/dev/null
sudo rm -rf /tmp/xray_temp/ &>/dev/null

print_status "Downloading GeoIP and GeoSite data files..."
sudo wget -O /usr/local/bin/geoip.dat "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat" || print_error "Failed to download geoip.dat."
sudo wget -O /usr/local/bin/geosite.dat "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat" || print_error "Failed to download geosite.dat."
sudo chown www-data:www-data /usr/local/bin/geoip.dat /usr/local/bin/geosite.dat || print_error "Failed to set ownership for data files."
sudo chmod 644 /usr/local/bin/geoip.dat /usr/local/bin/geosite.dat || print_error "Failed to set permissions for data files."

print_status "Creating XRAY systemd service file..."
sudo tee "$XRAY_SERVICE_FILE" >/dev/null <<'EOF_SERVICE'
[Unit]
Description=Xray Service
Documentation=https://github.com/XTLS/Xray-core/
After=network.target nss-lookup.target

[Service]
User=www-data
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
ExecStart=/usr/local/bin/xray run -config /etc/xray/config.json
Restart=on-failure
RestartPreventExitStatus=23
LimitNPROC=10000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF_SERVICE
sudo systemctl daemon-reload || print_error "Failed to reload systemd daemon."
sudo systemctl enable xray.service || print_error "Failed to enable XRAY service."

# Generate initial XRAY config with placeholders for TLS certs
print_status "Generating initial XRAY configuration with TLS placeholders..."
NEW_UUID=$(uuidgen) # Generate a fresh UUID for the primary user for initial config

cat <<EOF_CONFIG | sudo tee "$XRAY_CONFIG_DIR/config.json" >/dev/null
{
  "log": {
    "loglevel": "info",
    "error": "${XRAY_LOG_DIR}/error.log",
    "access": "${XRAY_LOG_DIR}/access.log"
  },
  "api": {
    "services": [
      "HandlerService",
      "LoggerService",
      "StatsService"
    ],
    "tag": "api"
  },
  "stats": {},
  "policy": {
    "levels": {
      "0": {
        "handshake": 2,
        "connIdle": 128,
        "statsUserUplink": true,
        "statsUserDownlink": true
      }
    },
    "system": {
      "statsInboundUplink": true,
      "statsInboundDownlink": true,
      "statsOutboundUplink": true,
      "statsOutboundDownlink": true
    }
  },
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "$NEW_UUID",
            "level": 0,
            "email": "user@${FULL_DOMAIN}"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "ws",
        "security": "tls",
        "tlsSettings": {
          "alpn": ["h2", "http/1.1"],
          "serverName": "$FULL_DOMAIN",
          "certificates": [
            {
              "certificateFile": "${XRAY_TLS_DIR}/fullchain.pem", # Placeholder, will be updated
              "keyFile": "${XRAY_TLS_DIR}/private.key"           # Placeholder, will be updated
            }
          ]
        },
        "wsSettings": {
          "path": "/vlessws",
          "headers": {
            "Host": "$FULL_DOMAIN"
          }
        }
      }
    },
    {
      "listen": "127.0.0.1",
      "port": 10000,
      "protocol": "dokodemo-door",
      "settings": {
        "address": "127.0.0.1"
      },
      "tag": "api"
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {},
      "tag": "direct"
    },
    {
      "protocol": "blackhole",
      "settings": {},
      "tag": "blocked"
    }
  ],
  "routing": {
    "domainStrategy": "AsIs",
    "rules": [
      {
        "type": "field",
        "inboundTag": ["api"],
        "outboundTag": "api"
      },
      {
        "type": "field",
        "ip": ["geoip:private"],
        "outboundTag": "blocked"
      },
      {
        "type": "field",
        "outboundTag": "direct",
        "network": "tcp,udp"
      }
    ]
  },
  "dns": {
    "hosts": {
      "dns.google": "8.8.8.8",
      "dns.pub": "119.29.29.29",
      "dns.alidns.com": "223.5.5.5",
      "geosite:category-ads-all": "127.0.0.1"
    },
    "servers": [
      {
        "address": "https://1.1.1.1/dns-query",
        "domains": ["geosite:geolocation-!cn"],
        "expectIPs": ["geoip:!cn"]
      },
      "8.8.8.8",
      {
        "address": "114.114.114.114",
        "port": 53,
        "domains": ["geosite:cn", "geosite:category-games@cn"],
        "expectIPs": ["geoip:cn"],
        "skipFallback": true
      },
      {
        "address": "localhost",
        "skipFallback": true
      }
    ]
  }
}
EOF_CONFIG
print_status "Initial XRAY config generated with UUID: ${YELLOW}$NEW_UUID${NC}"
echo "$NEW_UUID" # Echo UUID for main script to capture
print_status "XRAY Core Installation Complete!"
